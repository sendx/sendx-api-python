# coding: utf-8

"""
    SendX API

    SendX is built on the simple tenet that users must have open access to their data. SendX API is the first step in that direction. To cite some examples:   - subscribe / unsubscribe a contact from a list   - Schedule campaign to a segment of users   - Trigger transactional emails   - Get / PUT / POST and DELETE operations on team, campaign, list, contact, report etc. and so on.  As companies grow big, custom use cases around email marketing also crop up. SendX API ensures   that SendX platform is able to satisfy such unforeseen use cases. They may range from building     custom reporting dashboard to tagging contacts with custom attributes or triggering emails based on recommendation algorithm.  We do our best to have all our URLs be [RESTful](http://en.wikipedia.org/wiki/Representational_state_transfer). Every endpoint (URL) may support one of four different http verbs. GET requests fetch information about an object, POST requests create objects, PUT requests update objects, and finally DELETE requests will delete objects.  Also all API calls besides:   - Subscribe / unsubscribe signup form  required **api_key** to be passed as **header**   ### The Envelope Every response is contained by an envelope. That is, each response has a predictable set of keys with which you can expect to interact: ```json {     \"status\": \"200\",      \"message\": \"OK\",     \"data\"\": [        {          ...        },        .        .        .     ] } ```  #### Status  The status key is used to communicate extra information about the response to the developer. If all goes well, you'll only ever see a code key with value 200. However, sometimes things go wrong, and in that case you might see a response like: ```json {     \"status\": \"404\" } ```  #### Data  The data key is the meat of the response. It may be a list containing single object or multiple objects  #### Message  This returns back human readable message. This is specially useful to make sense in case of error scenarios. 

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import os
import sys
import unittest

import swagger_client
from swagger_client.rest import ApiException
from swagger_client.apis.tag_api import TagApi


class TestTagApi(unittest.TestCase):
    """ TagApi unit test stubs """

    def setUp(self):
        self.api = swagger_client.apis.tag_api.TagApi()

    def tearDown(self):
        pass

    def test_tag_get(self):
        """
        Test case for tag_get

        Get information about all tags
        """
        pass

    def test_tag_post(self):
        """
        Test case for tag_post

        Add a new tag
        """
        pass

    def test_tag_tag_id_contact_delete(self):
        """
        Test case for tag_tag_id_contact_delete

        Remove a contact from a tag
        """
        pass

    def test_tag_tag_id_contact_post(self):
        """
        Test case for tag_tag_id_contact_post

        Add a contact to a tag
        """
        pass

    def test_tag_tag_id_contacts_get(self):
        """
        Test case for tag_tag_id_contacts_get

        Find contacts belonging to a tag
        """
        pass

    def test_tag_tag_id_delete(self):
        """
        Test case for tag_tag_id_delete

        Deletes a tag
        """
        pass

    def test_tag_tag_id_get(self):
        """
        Test case for tag_tag_id_get

        Find tag by ID
        """
        pass

    def test_tag_tag_id_put(self):
        """
        Test case for tag_tag_id_put

        Update a tag by ID
        """
        pass


if __name__ == '__main__':
    unittest.main()
