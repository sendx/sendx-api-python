# coding: utf-8

"""
    SendX API

    SendX is built on the simple tenet that users must have open access to their data. SendX API is the first step in that direction. To cite some examples:   - subscribe / unsubscribe a contact from a list   - Schedule campaign to a segment of users   - Trigger transactional emails   - Get / PUT / POST and DELETE operations on team, campaign, list, contact, report etc. and so on.  As companies grow big, custom use cases around email marketing also crop up. SendX API ensures   that SendX platform is able to satisfy such unforeseen use cases. They may range from building     custom reporting dashboard to tagging contacts with custom attributes or triggering emails based on recommendation algorithm.  We do our best to have all our URLs be [RESTful](http://en.wikipedia.org/wiki/Representational_state_transfer). Every endpoint (URL) may support one of four different http verbs. GET requests fetch information about an object, POST requests create objects, PUT requests update objects, and finally DELETE requests will delete objects.  Also all API calls besides:   - Subscribe / unsubscribe signup form  required **api_key** to be passed as **header**   ### The Envelope Every response is contained by an envelope. That is, each response has a predictable set of keys with which you can expect to interact: ```json {     \"status\": \"200\",      \"message\": \"OK\",     \"data\"\": [        {          ...        },        .        .        .     ] } ```  #### Status  The status key is used to communicate extra information about the response to the developer. If all goes well, you'll only ever see a code key with value 200. However, sometimes things go wrong, and in that case you might see a response like: ```json {     \"status\": \"404\" } ```  #### Data  The data key is the meat of the response. It may be a list containing single object or multiple objects  #### Message  This returns back human readable message. This is specially useful to make sense in case of error scenarios. 

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Link(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, encrypted_id=None, url=None, campaign_id=None, drip_step_id=None):
        """
        Link - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'encrypted_id': 'int',
            'url': 'str',
            'campaign_id': 'int',
            'drip_step_id': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'encrypted_id': 'encrypted_id',
            'url': 'url',
            'campaign_id': 'campaign_id',
            'drip_step_id': 'drip_step_id'
        }

        self._id = id
        self._encrypted_id = encrypted_id
        self._url = url
        self._campaign_id = campaign_id
        self._drip_step_id = drip_step_id

    @property
    def id(self):
        """
        Gets the id of this Link.


        :return: The id of this Link.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Link.


        :param id: The id of this Link.
        :type: int
        """

        self._id = id

    @property
    def encrypted_id(self):
        """
        Gets the encrypted_id of this Link.


        :return: The encrypted_id of this Link.
        :rtype: int
        """
        return self._encrypted_id

    @encrypted_id.setter
    def encrypted_id(self, encrypted_id):
        """
        Sets the encrypted_id of this Link.


        :param encrypted_id: The encrypted_id of this Link.
        :type: int
        """

        self._encrypted_id = encrypted_id

    @property
    def url(self):
        """
        Gets the url of this Link.


        :return: The url of this Link.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this Link.


        :param url: The url of this Link.
        :type: str
        """

        self._url = url

    @property
    def campaign_id(self):
        """
        Gets the campaign_id of this Link.


        :return: The campaign_id of this Link.
        :rtype: int
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """
        Sets the campaign_id of this Link.


        :param campaign_id: The campaign_id of this Link.
        :type: int
        """

        self._campaign_id = campaign_id

    @property
    def drip_step_id(self):
        """
        Gets the drip_step_id of this Link.


        :return: The drip_step_id of this Link.
        :rtype: int
        """
        return self._drip_step_id

    @drip_step_id.setter
    def drip_step_id(self, drip_step_id):
        """
        Sets the drip_step_id of this Link.


        :param drip_step_id: The drip_step_id of this Link.
        :type: int
        """

        self._drip_step_id = drip_step_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
