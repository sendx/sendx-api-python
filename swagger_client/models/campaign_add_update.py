# coding: utf-8

"""
    SendX API

    SendX is built on the simple tenet that users must have open access to their data. SendX API is the first step in that direction. To cite some examples:   - subscribe / unsubscribe a contact from a list   - Schedule campaign to a segment of users   - Trigger transactional emails   - Get / PUT / POST and DELETE operations on team, campaign, list, contact, report etc. and so on.  As companies grow big, custom use cases around email marketing also crop up. SendX API ensures   that SendX platform is able to satisfy such unforeseen use cases. They may range from building     custom reporting dashboard to tagging contacts with custom attributes or triggering emails based on recommendation algorithm.  We do our best to have all our URLs be [RESTful](http://en.wikipedia.org/wiki/Representational_state_transfer). Every endpoint (URL) may support one of four different http verbs. GET requests fetch information about an object, POST requests create objects, PUT requests update objects, and finally DELETE requests will delete objects.  Also all API calls besides:   - Subscribe / unsubscribe signup form  required **api_key** to be passed as **header**   ### The Envelope Every response is contained by an envelope. That is, each response has a predictable set of keys with which you can expect to interact: ```json {     \"status\": \"200\",      \"message\": \"OK\",     \"data\"\": [        {          ...        },        .        .        .     ] } ```  #### Status  The status key is used to communicate extra information about the response to the developer. If all goes well, you'll only ever see a code key with value 200. However, sometimes things go wrong, and in that case you might see a response like: ```json {     \"status\": \"404\" } ```  #### Data  The data key is the meat of the response. It may be a list containing single object or multiple objects  #### Message  This returns back human readable message. This is specially useful to make sense in case of error scenarios. 

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CampaignAddUpdate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, status=None, type=None, schedule_condition=None, time_condition=None, timezone=None, metadata=None, team_id=None, provider_id=None, list_ids=None):
        """
        CampaignAddUpdate - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'status': 'int',
            'type': 'int',
            'schedule_condition': 'str',
            'time_condition': 'str',
            'timezone': 'str',
            'metadata': 'str',
            'team_id': 'int',
            'provider_id': 'int',
            'list_ids': 'list[int]'
        }

        self.attribute_map = {
            'name': 'name',
            'status': 'status',
            'type': 'type',
            'schedule_condition': 'schedule_condition',
            'time_condition': 'time_condition',
            'timezone': 'timezone',
            'metadata': 'metadata',
            'team_id': 'team_id',
            'provider_id': 'provider_id',
            'list_ids': 'list_ids'
        }

        self._name = name
        self._status = status
        self._type = type
        self._schedule_condition = schedule_condition
        self._time_condition = time_condition
        self._timezone = timezone
        self._metadata = metadata
        self._team_id = team_id
        self._provider_id = provider_id
        self._list_ids = list_ids

    @property
    def name(self):
        """
        Gets the name of this CampaignAddUpdate.


        :return: The name of this CampaignAddUpdate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CampaignAddUpdate.


        :param name: The name of this CampaignAddUpdate.
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """
        Gets the status of this CampaignAddUpdate.


        :return: The status of this CampaignAddUpdate.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this CampaignAddUpdate.


        :param status: The status of this CampaignAddUpdate.
        :type: int
        """

        self._status = status

    @property
    def type(self):
        """
        Gets the type of this CampaignAddUpdate.


        :return: The type of this CampaignAddUpdate.
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this CampaignAddUpdate.


        :param type: The type of this CampaignAddUpdate.
        :type: int
        """

        self._type = type

    @property
    def schedule_condition(self):
        """
        Gets the schedule_condition of this CampaignAddUpdate.


        :return: The schedule_condition of this CampaignAddUpdate.
        :rtype: str
        """
        return self._schedule_condition

    @schedule_condition.setter
    def schedule_condition(self, schedule_condition):
        """
        Sets the schedule_condition of this CampaignAddUpdate.


        :param schedule_condition: The schedule_condition of this CampaignAddUpdate.
        :type: str
        """

        self._schedule_condition = schedule_condition

    @property
    def time_condition(self):
        """
        Gets the time_condition of this CampaignAddUpdate.


        :return: The time_condition of this CampaignAddUpdate.
        :rtype: str
        """
        return self._time_condition

    @time_condition.setter
    def time_condition(self, time_condition):
        """
        Sets the time_condition of this CampaignAddUpdate.


        :param time_condition: The time_condition of this CampaignAddUpdate.
        :type: str
        """

        self._time_condition = time_condition

    @property
    def timezone(self):
        """
        Gets the timezone of this CampaignAddUpdate.


        :return: The timezone of this CampaignAddUpdate.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """
        Sets the timezone of this CampaignAddUpdate.


        :param timezone: The timezone of this CampaignAddUpdate.
        :type: str
        """

        self._timezone = timezone

    @property
    def metadata(self):
        """
        Gets the metadata of this CampaignAddUpdate.


        :return: The metadata of this CampaignAddUpdate.
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this CampaignAddUpdate.


        :param metadata: The metadata of this CampaignAddUpdate.
        :type: str
        """

        self._metadata = metadata

    @property
    def team_id(self):
        """
        Gets the team_id of this CampaignAddUpdate.


        :return: The team_id of this CampaignAddUpdate.
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """
        Sets the team_id of this CampaignAddUpdate.


        :param team_id: The team_id of this CampaignAddUpdate.
        :type: int
        """

        self._team_id = team_id

    @property
    def provider_id(self):
        """
        Gets the provider_id of this CampaignAddUpdate.


        :return: The provider_id of this CampaignAddUpdate.
        :rtype: int
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """
        Sets the provider_id of this CampaignAddUpdate.


        :param provider_id: The provider_id of this CampaignAddUpdate.
        :type: int
        """

        self._provider_id = provider_id

    @property
    def list_ids(self):
        """
        Gets the list_ids of this CampaignAddUpdate.


        :return: The list_ids of this CampaignAddUpdate.
        :rtype: list[int]
        """
        return self._list_ids

    @list_ids.setter
    def list_ids(self, list_ids):
        """
        Sets the list_ids of this CampaignAddUpdate.


        :param list_ids: The list_ids of this CampaignAddUpdate.
        :type: list[int]
        """

        self._list_ids = list_ids

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
